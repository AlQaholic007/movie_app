var app = require("../app");
var io = require("socket.io");
var debug = require("debug")("v2.0.0:server");
var http = require("http");
http.globalAgent.maxSockets = Infinity;
var port = normalizePort(process.env.PORT || app.conf.http.port);
app.set("port", port);
var server = http.createServer(app);
var sio = io(server);
var mongoAdapter = require("socket.io-adapter-mongo");
sio.adapter(mongoAdapter(app.conf.db.connectionUri));

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(
    `\n${app.conf.name} is listening on http://${app.conf.http.host}:${addr.port}\n`
  );
}

module.exports = { sio };
